@page "/bnb/{id?}"
@using System.Text.Json
@using System.Text.Json.Serialization;
@using Mybnb.blazor.Data
@using Mybnb.dtolibrary.DTOs.BNB;
@using System.Net.Http;
@using System.Net.Http.Headers;
@inject IJSRuntime jsr;

@if (string.IsNullOrEmpty(userdata))
{
	<p><a href="/login">LOGIN FOR AT SE DENNE</a></p>
}
else
{
    <h1>Call web API from a Blazor Server Razor component</h1>

    @if (getBnbsError)
    {
        <p>Unable to get bnbs from mybnbapi. Please try again later.</p>
    }
    else
    {
        @if (bnb != null) {
            <table>
               <tr>
                   <td colspan="4"><h2>@bnb.Title</h2></td>
               </tr>
               <tr>
                   <td><p>@bnb.Description</p></td>     
                   <td><p>@bnb.Address, @bnb.ZipCode</p></td>
                   <td><p><a href="/add-tenting-period/@bnb.ID">Tilføj udlejningsperiode</a></p></td>
                   <td><p><a href="/edit-bnb/@bnb.ID">Rediger</a></p></td>
                   <td><button onclick=@(() => EditButtonToggle())>Edit</button></td>
               </tr>
               @if(bnb.RentingPeriods != null){
                    @foreach (var rentingperiod in @bnb.RentingPeriods)
                    {
                         <RentingPeriod Period=rentingperiod />
                    }
                }
            

            </table>
        }

        if (editBNB)
        {
            <UpdateBNB BNB=bnbRequest UserData=userdata/>
        }
    }
}

@code {
    [Parameter]
    public string? id { get; set; }

    private BNBResponse bnb;
    private BNBRequest bnbRequest;
    private bool getBnbsError;
    private bool shouldRender;
    private bool editBNB = false;
    string userdata;

    private async Task<string> GetJWT()
    {
        userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
        if (!string.IsNullOrWhiteSpace(userdata))
        {
            var dataArray = userdata.Split(';', 2);
            if (dataArray.Length == 2)
                return dataArray[1];
        }
        return null;
    }

    private void EditButtonToggle()
    {
        if(bnbRequest == null)
        {
            bnbRequest = new BNBRequest
	        {
		        ID = bnb.ID,
		        Title = bnb.Title,
		        Description = bnb.Description,
		        Address = bnb.Address,
		        Country = bnb.Country,
		        ZipCode = bnb.ZipCode,
		        TypeOfEstablishment = bnb.TypeOfEstablishment
	        };
        }

        editBNB = !editBNB;
        StateHasChanged();
    }

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HttpClient httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await GetJWT());
            var request = new mybnbApiClient("https://localhost:7258", httpClient);

            bnb = await request.GetSingleBNB(int.Parse(id));

            shouldRender = true;

            InvokeAsync(StateHasChanged);
        }
    }
}