@page "/createbnb"
@using Microsoft.Extensions.Logging;
@using System.Text.Json;
@using System.Net.Http;
@using System.Text.Json.Serialization;
@using Mybnb.dtolibrary.DTOs.BNB;
@using System.Net.Http.Headers;
@inject IJSRuntime jsr;
@inject ILogger<CreateBNB> Logger

@if (string.IsNullOrEmpty(userdata))
{
	<p><a href="/login">LOGIN FOR AT SE DENNE</a></p>
}
else
{
    @if (success)
    {
        <h2>Din bolig er nu oprettet i vores system</h2>
    }
    <EditForm Model="@createBnb" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>Overskrift: <InputText id="Title" @bind-Value="createBnb.Title" />
        </label><br />
        <label> Beskrivelse:
        <InputText id="Description" @bind-Value="createBnb.Description" />
        </label><br />
        <label for="Address"> Adresse
            <InputText id="Address" @bind-Value="createBnb.Address" />
        </label>
        <br />
        <label for="ZipCode"> Postnr.
            <InputText id="ZipCode" @bind-Value="createBnb.ZipCode" />
        </label>
        <br />
        <label for="Country"> Land
            <InputText id="Country" @bind-Value="createBnb.Country" />
        </label>
        <br />

        <button type="submit">Submit</button>
    </EditForm>
}

@code {
    private CreateBNB createBnb = new();
    private bool success = false;
    private string userdata;

    private async Task<string> GetJWT()
    {
        if (!string.IsNullOrWhiteSpace(userdata))
        {
            var dataArray = userdata.Split(';', 2);
            if (dataArray.Length == 2)
                return dataArray[1];
        }
        return null;
    }

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        // Process the valid form
        HttpClient httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await GetJWT());
        var request = new mybnbApiClient("https://localhost:7258", httpClient);

        var allBnbs = await request.BNBsAsync(createBnb);

        if (allBnbs != null)
        {
            success = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
            InvokeAsync(StateHasChanged);
        }
    }
    
}